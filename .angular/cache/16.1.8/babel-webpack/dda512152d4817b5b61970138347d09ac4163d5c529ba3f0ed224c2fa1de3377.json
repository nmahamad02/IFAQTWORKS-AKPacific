{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { UntypedFormArray, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\nexport let ProductsDetailsComponent = class ProductsDetailsComponent {\n  constructor(productService, route, lookupService, financeservice, uploadService, _snackBar) {\n    this.productService = productService;\n    this.route = route;\n    this.lookupService = lookupService;\n    this.financeservice = financeservice;\n    this.uploadService = uploadService;\n    this._snackBar = _snackBar;\n    this.currentYear = new Date().getFullYear();\n    this.slides = [];\n    this.locationList = [];\n    this.categoryList = [];\n    this.subCategoryList = [];\n    this.manufacturerList = [];\n    this.brandList = [];\n    this.supplierList = [];\n    this.mainImgSrc = '';\n    this.lookupService.getCategory().subscribe(res => {\n      this.categoryList = res;\n    });\n    this.lookupService.getSubcategory().subscribe(res => {\n      this.subCategoryList = res;\n    });\n    this.lookupService.getLocation().subscribe(res => {\n      this.locationList = res;\n    });\n    this.lookupService.getManufacturer().subscribe(res => {\n      this.manufacturerList = res;\n    });\n    this.lookupService.getBrand().subscribe(res => {\n      this.brandList = res;\n    });\n    this.financeservice.getSupplierList(String(this.currentYear)).subscribe(res => {\n      this.supplierList = res.recordset;\n    });\n    this.prodForm = new UntypedFormGroup({\n      pcode: new UntypedFormControl('', [Validators.required]),\n      description: new UntypedFormControl('', [Validators.required]),\n      barcode: new UntypedFormControl('', [Validators.required]),\n      costPrice: new UntypedFormControl('', [Validators.required]),\n      retailPrice: new UntypedFormControl('', [Validators.required]),\n      dealerPrice: new UntypedFormControl('', [Validators.required]),\n      categoryId: new UntypedFormControl('', [Validators.required]),\n      subCategoryId: new UntypedFormControl('', [Validators.required]),\n      manufacturerId: new UntypedFormControl('', [Validators.required]),\n      supplierId: new UntypedFormControl('', [Validators.required]),\n      qoh: new UntypedFormControl('', [Validators.required]),\n      qoo: new UntypedFormControl('', [Validators.required]),\n      reQty: new UntypedFormControl('', [Validators.required]),\n      year: new UntypedFormControl(String(this.currentYear), [Validators.required]),\n      remarks: new UntypedFormControl('', [Validators.required]),\n      brand: new UntypedFormControl('', [Validators.required]),\n      model: new UntypedFormControl('', [Validators.required]),\n      dealer: new UntypedFormControl('', [Validators.required]),\n      locationStock: new UntypedFormArray([]),\n      documents: new UntypedFormArray([]),\n      images: new UntypedFormArray([])\n    });\n  }\n  addLocation() {\n    const loc = new UntypedFormGroup({\n      prodLocation: new UntypedFormControl('', [Validators.required]),\n      prodOpeningQty: new UntypedFormControl('', [Validators.required]),\n      prodTotalIn: new UntypedFormControl('', [Validators.required]),\n      prodTotalOut: new UntypedFormControl('', [Validators.required]),\n      prodCurrentQty: new UntypedFormControl('', [Validators.required])\n    });\n    this.locStock.push(loc);\n  }\n  deleteLocation(index) {\n    if (this.locStock.length === 1) {\n      console.log(this.locStock);\n    } else {\n      this.locStock.removeAt(index);\n    }\n  }\n  addDocument() {\n    const document = new UntypedFormGroup({\n      prodDocument: new UntypedFormControl('', []),\n      prodDocumentSrc: new UntypedFormControl('', []),\n      prodDocumentSource: new UntypedFormControl('', []),\n      prodDocumentType: new UntypedFormControl('', []),\n      prodDocumentUrl: new UntypedFormControl('', [])\n    });\n    this.documents.push(document);\n  }\n  deleteDocument(index) {\n    this.documents.removeAt(index);\n  }\n  addImage() {\n    const image = new UntypedFormGroup({\n      prodImage: new UntypedFormControl('', []),\n      prodImageSrc: new UntypedFormControl('', []),\n      prodImageSource: new UntypedFormControl('', []),\n      prodImageType: new UntypedFormControl('', []),\n      prodImageUrl: new UntypedFormControl('', [])\n    });\n    this.images.push(image);\n  }\n  deleteImage(index) {\n    this.images.removeAt(index);\n  }\n  onFileChange(event, type) {\n    var filesList = event.target.files;\n    const reader = new FileReader();\n    if (type === \"I\") {\n      if (event.target.files && event.target.files.length) {\n        const fileToUpload = filesList.item(0);\n        const fileNm = fileToUpload.name;\n        reader.readAsDataURL(fileToUpload);\n        reader.onload = () => {\n          const docUrl = \"https://ifaqtworks-akpacific.s3.me-south-1.amazonaws.com/documents/\" + fileNm;\n          const image = new UntypedFormGroup({\n            prodImage: new UntypedFormControl(fileToUpload, []),\n            prodImageSrc: new UntypedFormControl(reader.result, []),\n            prodImageSource: new UntypedFormControl(fileNm, []),\n            prodImageType: new UntypedFormControl('', []),\n            prodImageUrl: new UntypedFormControl(docUrl, [])\n          });\n          this.images.push(image);\n        };\n        this.clearExtra(type);\n        //this.selectedFileToUpload = fileToUpload;\n      }\n    } else if (type === \"D\") {\n      if (event.target.files && event.target.files.length) {\n        const fileToUpload = filesList.item(0);\n        const fileNm = fileToUpload.name;\n        reader.readAsDataURL(fileToUpload);\n        reader.onload = () => {\n          const docUrl = \"https://ifaqtworks-akpacific.s3.me-south-1.amazonaws.com/documents/\" + fileNm;\n          const document = new UntypedFormGroup({\n            prodDocument: new UntypedFormControl(fileToUpload, []),\n            prodDocumentSrc: new UntypedFormControl(reader.result, []),\n            prodDocumentSource: new UntypedFormControl(fileNm, []),\n            prodDocumentType: new UntypedFormControl('', []),\n            prodDocumentUrl: new UntypedFormControl(docUrl, [])\n          });\n          this.documents.push(document);\n        };\n        this.clearExtra(type);\n        //this.selectedFileToUpload = fileToUpload;\n      }\n    }\n  }\n\n  clearExtra(type) {\n    if (type === \"I\") {\n      for (let i = 0; i < this.images.length; i++) {\n        if (this.images.at(i).value.prodImage === \"\") {\n          console.log('empty');\n          this.deleteImage(i);\n        } else {\n          console.log(this.images.at(i).value.prodImage);\n        }\n      }\n    } else if (type === \"D\") {\n      for (let i = 0; i < this.documents.length; i++) {\n        if (this.documents.at(i).value.prodDocument === \"\") {\n          console.log('empty');\n          this.deleteDocument(i);\n        } else {\n          console.log(this.documents.at(i).value.prodDocument);\n        }\n      }\n    }\n  }\n  submitForm() {\n    const data = this.prodForm.value;\n    console.log(data);\n    this.productService.getProduct(data.pcode, data.year).subscribe(res => {\n      if (res.recordset.length == 0) {\n        console.log(\"insert\");\n        this.productService.postProduct(data.pcode, data.description, data.subCategoryId, data.costPrice, data.retailPrice, data.barcode, data.manufacturerId, data.reQty, data.supplierId, data.qoh, data.year, data.dealerPrice, data.remarks, data.qoo, data.brand, data.model, data.dealer, '');\n        for (let i = 0; i < data.locationStock.length; i++) {\n          this.productService.postProductLocations(data.pcode, data.locationStock[i].prodLocation, data.locationStock[i].prodOpeningQty, data.year);\n        }\n        for (let i = 0; i < data.documents.length; i++) {\n          this.uploadService.uploadDoc(data.documents[i].prodDocument);\n          this.productService.postProductDocuments(data.pcode, data.documents[i].prodDocumentSource, data.documents[i].prodDocumentType, 'DOC');\n        }\n        for (let i = 0; i < data.images.length; i++) {\n          this.uploadService.uploadImage(data.images[i].prodImage);\n          this.productService.postProductDocuments(data.pcode, data.images[i].prodImageSource, data.images[i].prodImageType, 'IMG');\n        }\n        this._snackBar.open(\"Data Successfully Inserted!\", \"OK\");\n        //this.refreshForm();\n        this.getData(data.pcode);\n      } else {\n        console.log(\"update\");\n        this.productService.updateProduct(data.pcode, data.description, data.subCategoryId, data.costPrice, data.retailPrice, data.barcode, data.manufacturerId, data.reQty, data.supplierId, data.qoh, data.year, data.dealerPrice, data.remarks, data.qoo, data.brand, data.model, data.dealer, '');\n        for (let i = 0; i < data.locationStock.length; i++) {\n          this.productService.updateProductLocations(data.pcode, data.locationStock[i].prodLocation, data.locationStock[i].prodOpeningQty, data.year);\n        }\n        this.productService.getProductDocuments(data.pcode, 'DOC').subscribe(respo => {\n          if (respo.recordset.length === 0) {\n            for (let i = 0; i < data.documents.length; i++) {\n              this.uploadService.uploadDoc(data.documents[i].prodDocument);\n              this.productService.postProductDocuments(data.pcode, data.documents[i].prodDocumentSource, data.documents[i].prodDocumentType, 'DOC');\n            }\n          } else {\n            this.productService.deleteProductDocument(data.pcode, 'DOC').subscribe(() => {\n              for (let i = 0; i < data.documents.length; i++) {\n                if (data.documents[i].prodDocument === 'Existing') {\n                  this.productService.postProductDocuments(data.pcode, data.documents[i].prodDocumentSource, data.documents[i].prodDocumentType, 'DOC');\n                } else {\n                  this.uploadService.uploadDoc(data.documents[i].prodDocument);\n                  this.productService.postProductDocuments(data.pcode, data.documents[i].prodDocumentSource, data.documents[i].prodDocumentType, 'DOC');\n                }\n              }\n            });\n          }\n        }, erro => {\n          for (let i = 0; i < data.documents.length; i++) {\n            this.uploadService.uploadDoc(data.documents[i].prodDocument);\n            this.productService.postProductDocuments(data.pcode, data.documents[i].prodDocumentSource, data.documents[i].prodDocumentType, 'DOC');\n          }\n        });\n        this.productService.getProductDocuments(data.pcode, 'IMG').subscribe(respo => {\n          if (respo.recordset.length === 0) {\n            for (let i = 0; i < data.images.length; i++) {\n              this.uploadService.uploadImage(data.images[i].prodImage);\n              this.productService.postProductDocuments(data.pcode, data.images[i].prodImageSource, data.images[i].prodImageType, 'IMG');\n            }\n          } else {\n            this.productService.deleteProductDocument(data.pcode, 'IMG').subscribe(() => {\n              for (let i = 0; i < data.images.length; i++) {\n                if (data.images[i].prodImage == 'Existing') {\n                  this.productService.postProductDocuments(data.pcode, data.images[i].prodImageSource, data.images[i].prodImageType, 'IMG');\n                } else {\n                  this.uploadService.uploadImage(data.images[i].prodImage);\n                  this.productService.postProductDocuments(data.pcode, data.images[i].prodImageSource, data.images[i].prodImageType, 'IMG');\n                }\n              }\n            });\n          }\n        }, erro => {\n          for (let i = 0; i < data.images.length; i++) {\n            this.uploadService.uploadImage(data.images[i].prodImage);\n            this.productService.postProductDocuments(data.pcode, data.images[i].prodImageSource, data.images[i].prodImageType, 'IMG');\n          }\n        });\n        this._snackBar.open(\"Data Successfully Updated!\", \"OK\");\n        //this.refreshForm();        \n        this.getData(data.pcode);\n      }\n    }, err => {\n      console.log(\"insert\");\n      this.productService.postProduct(data.pcode, data.description, data.subCategoryId, data.costPrice, data.retailPrice, data.barcode, data.manufacturerId, data.reQty, data.supplierId, data.qoh, data.year, data.dealerPrice, data.remarks, data.qoo, data.brand, data.model, data.dealer, '');\n      for (let i = 0; i < data.locationStock.length; i++) {\n        this.productService.postProductLocations(data.pcode, data.locationStock[i].prodLocation, data.locationStock[i].prodOpeningQty, data.year);\n      }\n      for (let i = 0; i < data.documents.length; i++) {\n        this.uploadService.uploadDoc(data.documents[i].prodDocument);\n        this.productService.postProductDocuments(data.pcode, data.documents[i].prodDocumentSource, data.documents[i].prodDocumentType, 'DOC');\n      }\n      for (let i = 0; i < data.images.length; i++) {\n        this.uploadService.uploadImage(data.images[i].prodImage);\n        this.productService.postProductDocuments(data.pcode, data.images[i].prodImageSource, data.images[i].prodImageType, 'IMG');\n      }\n      this._snackBar.open(\"Data Successfully Inserted!\", \"OK\");\n      //this.refreshForm();\n      this.getData(data.pcode);\n    });\n  }\n  ngOnInit() {\n    if (this.route.snapshot.params.id === 'new') {\n      this.newForm();\n    } else {\n      this.getData(this.route.snapshot.params.id);\n    }\n  }\n  newForm() {\n    this.refreshForm();\n    this.slides = [];\n    var img = {\n      src: \"https://ifaqtworks-akpacific.s3.me-south-1.amazonaws.com/images/imgNaN.png\"\n    };\n    this.slides.push(img);\n    this.prodForm = new UntypedFormGroup({\n      pcode: new UntypedFormControl('', [Validators.required]),\n      description: new UntypedFormControl('', [Validators.required]),\n      barcode: new UntypedFormControl('', [Validators.required]),\n      costPrice: new UntypedFormControl('', [Validators.required]),\n      retailPrice: new UntypedFormControl('', [Validators.required]),\n      dealerPrice: new UntypedFormControl('', [Validators.required]),\n      categoryId: new UntypedFormControl('', [Validators.required]),\n      subCategoryId: new UntypedFormControl('', [Validators.required]),\n      manufacturerId: new UntypedFormControl('', [Validators.required]),\n      supplierId: new UntypedFormControl('', [Validators.required]),\n      qoh: new UntypedFormControl('', [Validators.required]),\n      qoo: new UntypedFormControl('', [Validators.required]),\n      reQty: new UntypedFormControl('', [Validators.required]),\n      year: new UntypedFormControl(String(this.currentYear), [Validators.required]),\n      remarks: new UntypedFormControl('', [Validators.required]),\n      brand: new UntypedFormControl('', [Validators.required]),\n      model: new UntypedFormControl('', [Validators.required]),\n      dealer: new UntypedFormControl('', [Validators.required]),\n      locationStock: new UntypedFormArray([]),\n      documents: new UntypedFormArray([]),\n      images: new UntypedFormArray([])\n    });\n    this.productService.getLocationWiseProduct('NEW', String(this.currentYear)).subscribe(respo => {\n      const locStockArr = respo.recordset;\n      for (let i = 0; i < locStockArr.length; i++) {\n        const loc = new UntypedFormGroup({\n          prodLocation: new UntypedFormControl(locStockArr[i].LOCATIONID, [Validators.required]),\n          prodOpeningQty: new UntypedFormControl(locStockArr[i].OPENING_QTY, [Validators.required]),\n          prodTotalIn: new UntypedFormControl(locStockArr[i].TOTAL_IN, [Validators.required]),\n          prodTotalOut: new UntypedFormControl(locStockArr[i].TOTAL_OUT, [Validators.required]),\n          prodCurrentQty: new UntypedFormControl(locStockArr[i].CURRENT_QTY, [Validators.required])\n        });\n        this.locStock.push(loc);\n      }\n    });\n  }\n  refreshForm() {\n    this.slides = [];\n    this.prodForm = new UntypedFormGroup({\n      pcode: new UntypedFormControl('', [Validators.required]),\n      description: new UntypedFormControl('', [Validators.required]),\n      barcode: new UntypedFormControl('', [Validators.required]),\n      costPrice: new UntypedFormControl('', [Validators.required]),\n      retailPrice: new UntypedFormControl('', [Validators.required]),\n      dealerPrice: new UntypedFormControl('', [Validators.required]),\n      categoryId: new UntypedFormControl('', [Validators.required]),\n      subCategoryId: new UntypedFormControl('', [Validators.required]),\n      manufacturerId: new UntypedFormControl('', [Validators.required]),\n      supplierId: new UntypedFormControl('', [Validators.required]),\n      qoh: new UntypedFormControl('', [Validators.required]),\n      qoo: new UntypedFormControl('', [Validators.required]),\n      reQty: new UntypedFormControl('', [Validators.required]),\n      year: new UntypedFormControl(String(this.currentYear), [Validators.required]),\n      remarks: new UntypedFormControl('', [Validators.required]),\n      brand: new UntypedFormControl('', [Validators.required]),\n      model: new UntypedFormControl('', [Validators.required]),\n      dealer: new UntypedFormControl('', [Validators.required]),\n      locationStock: new UntypedFormArray([]),\n      documents: new UntypedFormArray([]),\n      images: new UntypedFormArray([])\n    });\n  }\n  getData(pcode) {\n    this.refreshForm();\n    this.productService.getProduct(pcode, String(this.currentYear)).subscribe(res => {\n      console.log(res);\n      this.lookupService.getSubcategoryDetails(res.recordset[0].SUBCATEGORY_ID).subscribe(resp => {\n        console.log(resp);\n        this.prodForm.patchValue({\n          pcode: res.recordset[0].PCODE,\n          description: res.recordset[0].DESCRIPTION,\n          barcode: res.recordset[0].BARCODE,\n          costPrice: res.recordset[0].COSTPRICE,\n          retailPrice: res.recordset[0].RETAILPRICE,\n          dealerPrice: res.recordset[0].DEALERPRICE,\n          categoryId: resp.recordset[0].CATEGORY_ID,\n          subCategoryId: res.recordset[0].SUBCATEGORY_ID,\n          manufacturerId: res.recordset[0].MANUFACTURER_ID,\n          supplierId: res.recordset[0].SUPPLIER_ID,\n          qoh: res.recordset[0].QOH,\n          qoo: res.recordset[0].QOO,\n          reQty: res.recordset[0].REORDER,\n          year: res.recordset[0].YEAR,\n          remarks: res.recordset[0].REMARKS,\n          brand: res.recordset[0].DESC1,\n          model: res.recordset[0].DESC2,\n          dealer: res.recordset[0].DESC3\n        });\n        this.productService.getLocationWiseProduct(res.recordset[0].PCODE, String(this.currentYear)).subscribe(respo => {\n          console.log(respo);\n          const locStockArr = respo.recordset;\n          for (let i = 0; i < locStockArr.length; i++) {\n            const loc = new UntypedFormGroup({\n              prodLocation: new UntypedFormControl(locStockArr[i].LOCATIONID, [Validators.required]),\n              prodOpeningQty: new UntypedFormControl(locStockArr[i].OPENING_QTY, [Validators.required]),\n              prodTotalIn: new UntypedFormControl(locStockArr[i].TOTAL_IN, [Validators.required]),\n              prodTotalOut: new UntypedFormControl(locStockArr[i].TOTAL_OUT, [Validators.required]),\n              prodCurrentQty: new UntypedFormControl(locStockArr[i].CURRENT_QTY, [Validators.required])\n            });\n            this.locStock.push(loc);\n          }\n        });\n        this.productService.getProductDocuments(res.recordset[0].PCODE, 'DOC').subscribe(respo => {\n          console.log(respo);\n          for (let i = 0; i < respo.recordset.length; i++) {\n            const docUrl = \"https://ifaqtworks-akpacific.s3.me-south-1.amazonaws.com/documents/\" + respo.recordset[i].DOCUMENTNAME;\n            const document = new UntypedFormGroup({\n              prodDocument: new UntypedFormControl('Existing', []),\n              prodDocumentSrc: new UntypedFormControl(docUrl, []),\n              prodDocumentSource: new UntypedFormControl(respo.recordset[i].DOCUMENTNAME, []),\n              prodDocumentType: new UntypedFormControl(respo.recordset[i].DOCUMENTTYPE, []),\n              prodDocumentUrl: new UntypedFormControl(docUrl, [])\n            });\n            this.documents.push(document);\n          }\n        });\n        this.productService.getProductDocuments(res.recordset[0].PCODE, 'IMG').subscribe(respo => {\n          console.log(respo);\n          if (respo.recordset.length === 0) {\n            var img = {\n              src: \"https://ifaqtworks-akpacific.s3.me-south-1.amazonaws.com/images/imgNaN.png\"\n            };\n            this.slides.push(img);\n          } else {\n            for (let i = 0; i < respo.recordset.length; i++) {\n              const docUrl = \"https://ifaqtworks-akpacific.s3.me-south-1.amazonaws.com/images/\" + respo.recordset[i].DOCUMENTNAME;\n              const image = new UntypedFormGroup({\n                prodImage: new UntypedFormControl('Existing', []),\n                prodImageSrc: new UntypedFormControl(docUrl, []),\n                prodImageSource: new UntypedFormControl(respo.recordset[i].DOCUMENTNAME, []),\n                prodImageType: new UntypedFormControl(respo.recordset[i].DOCUMENTTYPE, []),\n                prodImageUrl: new UntypedFormControl(docUrl, [])\n              });\n              this.images.push(image);\n              var img = {\n                src: docUrl\n              };\n              this.slides.push(img);\n            }\n          }\n        }, err => {\n          var img = {\n            src: \"https://ifaqtworks-akpacific.s3.me-south-1.amazonaws.com/images/imgNaN.png\"\n          };\n          this.slides.push(img);\n        });\n      });\n    });\n  }\n  goToLink(url) {\n    window.open(url, \"_blank\");\n  }\n  get f() {\n    return this.prodForm.controls;\n  }\n  get locStock() {\n    return this.prodForm.get('locationStock');\n  }\n  get documents() {\n    return this.prodForm.get('documents');\n  }\n  get images() {\n    return this.prodForm.get('images');\n  }\n};\nProductsDetailsComponent = __decorate([Component({\n  selector: 'app-products-details',\n  templateUrl: './products-details.component.html',\n  styleUrls: ['./products-details.component.scss']\n})], ProductsDetailsComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}