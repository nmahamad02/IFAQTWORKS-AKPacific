{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject, LOCALE_ID, ViewChild } from '@angular/core';\nimport { UntypedFormGroup, UntypedFormControl, Validators, UntypedFormArray } from '@angular/forms';\nimport { MatTableDataSource } from '@angular/material';\nimport * as converter from 'number-to-words';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport autoTable from 'jspdf-autotable';\nexport let QuotationsDetailsComponent = class QuotationsDetailsComponent {\n  constructor(dialog, quotationService, route, financeService, productService, _snackBar, locale) {\n    this.dialog = dialog;\n    this.quotationService = quotationService;\n    this.route = route;\n    this.financeService = financeService;\n    this.productService = productService;\n    this._snackBar = _snackBar;\n    this.locale = locale;\n    this.uC = JSON.parse(localStorage.getItem('userid'));\n    this.utc = new Date();\n    this.mCurDate = this.formatDate(this.utc);\n    this.mCMonth = new Date().getMonth();\n    this.mCYear = new Date().getFullYear();\n    this.forwardDate = new Date(new Date().setDate(this.utc.getDate() + 30));\n    this.nNewDate = this.formatDate(this.forwardDate);\n    this.prodDetailsArr = [];\n    this.slides = [];\n    this.custArr = [];\n    this.prodArr = [];\n    this.taxArr = [];\n    this.unitArr = [];\n    this.selectedRowIndex = 0;\n    this.productIndex = 0;\n    this.custDisplayedColumns = [\"PCODE\", \"CUST_NAME\", \"TAX_1_NO\"];\n    this.custDataSource = new MatTableDataSource(this.custArr);\n    this.prodDisplayedColumns = [\"PCODE\", \"DESCRIPTION\", \"RETAILPRICE\", \"BARCODE\"];\n    this.prodDataSource = new MatTableDataSource(this.prodArr);\n    this.mQtnTotal = 0;\n    this.mQtnVAT = 0;\n    this.mQtnDisc = 0;\n    this.mQtnGTotal = 0;\n    this.mQtnNumToWords = '';\n    this.quotForm = new UntypedFormGroup({\n      quotNo: new UntypedFormControl('', [Validators.required]),\n      quotDate: new UntypedFormControl('', [Validators.required]),\n      quotExpDate: new UntypedFormControl('', [Validators.required]),\n      pcode: new UntypedFormControl('', [Validators.required]),\n      custName: new UntypedFormControl('', [Validators.required]),\n      quotStatus: new UntypedFormControl('', [Validators.required]),\n      subject: new UntypedFormControl('', [Validators.required]),\n      remarks: new UntypedFormControl('', [Validators.required]),\n      description: new UntypedFormControl('', [Validators.required]),\n      custPhone1: new UntypedFormControl('', [Validators.required]),\n      custPhone2: new UntypedFormControl('', [Validators.required]),\n      custEmail: new UntypedFormControl('', [Validators.required]),\n      custAdd1: new UntypedFormControl('', [Validators.required]),\n      custAdd2: new UntypedFormControl('', [Validators.required]),\n      custAdd3: new UntypedFormControl('', [Validators.required]),\n      contactId: new UntypedFormControl('', [Validators.required]),\n      itemArr: new UntypedFormArray([])\n    });\n    this.valueForm = new UntypedFormGroup({\n      index: new UntypedFormControl('', [Validators.required]),\n      boqNo: new UntypedFormControl('', [Validators.required]),\n      prodCode: new UntypedFormControl('', [Validators.required]),\n      prodUnit: new UntypedFormControl('', [Validators.required]),\n      prodDesc: new UntypedFormControl('', [Validators.required]),\n      quantity: new UntypedFormControl('', [Validators.required]),\n      unitPrice: new UntypedFormControl('', [Validators.required]),\n      value: new UntypedFormControl('', [Validators.required]),\n      discPercentage: new UntypedFormControl('', [Validators.required]),\n      discount: new UntypedFormControl('', [Validators.required]),\n      amount: new UntypedFormControl('', [Validators.required]),\n      vatCategory: new UntypedFormControl('', [Validators.required]),\n      vatPer: new UntypedFormControl('', [Validators.required]),\n      vatAmount: new UntypedFormControl('', [Validators.required]),\n      netValue: new UntypedFormControl('', [Validators.required]),\n      remarks: new UntypedFormControl('', [Validators.required])\n    });\n  }\n  ngOnInit() {\n    if (this.route.snapshot.params.id === 'new') {\n      this.newForm();\n    } else {\n      this.getData(this.route.snapshot.params.id);\n    }\n    this.financeService.getTaxCategory().subscribe(res => {\n      this.taxArr = res.recordset;\n    }, err => {\n      console.log(err);\n    });\n    this.financeService.getUnit().subscribe(res => {\n      this.unitArr = res.recordset;\n    }, err => {\n      console.log(err);\n    });\n  }\n  newForm() {\n    this.mQtnTotal = 0;\n    this.mQtnDisc = 0;\n    this.mQtnVAT = 0;\n    this.mQtnGTotal = 0;\n    this.quotationService.getQuotNoFromDoc(String(this.mCYear)).subscribe(res => {\n      this.docQtnNo = res.recordset[0].FIELD_VALUE_NM + 1;\n      var newQtnNo = 'AKPI-' + this.docQtnNo + '-' + String(this.mCMonth) + String(this.mCYear);\n      this.quotForm = new UntypedFormGroup({\n        quotNo: new UntypedFormControl(newQtnNo, [Validators.required]),\n        quotDate: new UntypedFormControl(this.mCurDate, [Validators.required]),\n        quotExpDate: new UntypedFormControl(this.forwardDate, [Validators.required]),\n        pcode: new UntypedFormControl('', [Validators.required]),\n        custName: new UntypedFormControl('', [Validators.required]),\n        quotStatus: new UntypedFormControl('O', [Validators.required]),\n        subject: new UntypedFormControl('', [Validators.required]),\n        remarks: new UntypedFormControl('', [Validators.required]),\n        description: new UntypedFormControl('', [Validators.required]),\n        custPhone1: new UntypedFormControl('', [Validators.required]),\n        custPhone2: new UntypedFormControl('', [Validators.required]),\n        custEmail: new UntypedFormControl('', [Validators.required]),\n        custAdd1: new UntypedFormControl('', [Validators.required]),\n        custAdd2: new UntypedFormControl('', [Validators.required]),\n        custAdd3: new UntypedFormControl('', [Validators.required]),\n        contactId: new UntypedFormControl('', [Validators.required]),\n        itemArr: new UntypedFormArray([])\n      });\n      this.valueForm = new UntypedFormGroup({\n        index: new UntypedFormControl('', [Validators.required]),\n        boqNo: new UntypedFormControl('', [Validators.required]),\n        prodCode: new UntypedFormControl('', [Validators.required]),\n        prodUnit: new UntypedFormControl('', [Validators.required]),\n        prodDesc: new UntypedFormControl('', [Validators.required]),\n        quantity: new UntypedFormControl('', [Validators.required]),\n        unitPrice: new UntypedFormControl('', [Validators.required]),\n        value: new UntypedFormControl('', [Validators.required]),\n        discPercentage: new UntypedFormControl(0, [Validators.required]),\n        discount: new UntypedFormControl('', [Validators.required]),\n        amount: new UntypedFormControl('', [Validators.required]),\n        vatCategory: new UntypedFormControl('', [Validators.required]),\n        vatPer: new UntypedFormControl('', [Validators.required]),\n        vatAmount: new UntypedFormControl('', [Validators.required]),\n        netValue: new UntypedFormControl('', [Validators.required]),\n        remarks: new UntypedFormControl('', [Validators.required])\n      });\n    });\n  }\n  getData(quotNo) {\n    this.quotationService.getQuotationMaster(quotNo).subscribe(res => {\n      console.log(res);\n      this.financeService.getCustomerDetailFromPcode(String(this.mCYear), res.recordset[0].PCODE).subscribe(resp => {\n        console.log(res);\n        this.quotForm = new UntypedFormGroup({\n          quotNo: new UntypedFormControl(res.recordset[0].QUOTNO, [Validators.required]),\n          quotDate: new UntypedFormControl(this.formatDate(res.recordset[0].QUOTDATE), [Validators.required]),\n          quotExpDate: new UntypedFormControl(res.recordset[0].EXPIRY_DATE, [Validators.required]),\n          pcode: new UntypedFormControl(resp.recordset[0].PCODE, [Validators.required]),\n          custName: new UntypedFormControl(resp.recordset[0].CUST_NAME, [Validators.required]),\n          quotStatus: new UntypedFormControl(res.recordset[0].STATUS, [Validators.required]),\n          subject: new UntypedFormControl(res.recordset[0].SUBJECT, [Validators.required]),\n          remarks: new UntypedFormControl(res.recordset[0].REMARKS, [Validators.required]),\n          description: new UntypedFormControl(res.recordset[0].DESC1, [Validators.required]),\n          custPhone1: new UntypedFormControl(resp.recordset[0].PHONE1, [Validators.required]),\n          custPhone2: new UntypedFormControl(resp.recordset[0].PHONE2, [Validators.required]),\n          custEmail: new UntypedFormControl(resp.recordset[0].EMAIL, [Validators.required]),\n          custAdd1: new UntypedFormControl(resp.recordset[0].ADD1, [Validators.required]),\n          custAdd2: new UntypedFormControl(resp.recordset[0].ADD2, [Validators.required]),\n          custAdd3: new UntypedFormControl(resp.recordset[0].ADD3, [Validators.required]),\n          contactId: new UntypedFormControl(resp.recordset[0].CONTACT, [Validators.required]),\n          itemArr: new UntypedFormArray([])\n        });\n        this.mQtnTotal = Number(res.recordset[0].TOTAL);\n        this.mQtnDisc = Number(res.recordset[0].DISCOUNT);\n        this.mQtnVAT = Number(res.recordset[0].TAX_1_AMT);\n        this.mQtnGTotal = Number(res.recordset[0].GTOTAL);\n        this.mQtnNumToWords = converter.toWords(res.recordset[0].GTOTAL);\n        this.quotationService.getQuotationDetails(quotNo).subscribe(resp => {\n          console.log(resp);\n          for (let i = 0; i < resp.recordset.length; i++) {\n            const prodGrid = new UntypedFormGroup({\n              boqNo: new UntypedFormControl(resp.recordset[i].JOB_NO, [Validators.required]),\n              prodCode: new UntypedFormControl(resp.recordset[i].ITCODE, [Validators.required]),\n              prodDesc: new UntypedFormControl(resp.recordset[i].DESCRIPTION, [Validators.required]),\n              prodUnit: new UntypedFormControl(resp.recordset[i].UNITTYPE, [Validators.required]),\n              prodQty: new UntypedFormControl(resp.recordset[i].TOTQTY, [Validators.required]),\n              unitPrice: new UntypedFormControl(resp.recordset[i].PRICE, [Validators.required]),\n              value: new UntypedFormControl(Number(resp.recordset[i].TOTQTY) * Number(resp.recordset[i].PRICE), [Validators.required]),\n              discPercentage: new UntypedFormControl(resp.recordset[i].DISPER, [Validators.required]),\n              discount: new UntypedFormControl(resp.recordset[i].DISAMT, [Validators.required]),\n              vatCategory: new UntypedFormControl(resp.recordset[i].TAX_CATEGORY_ID, [Validators.required]),\n              vatPer: new UntypedFormControl(resp.recordset[i].TAX_1_PER, [Validators.required]),\n              vatAmount: new UntypedFormControl(resp.recordset[i].TAX_1_AMT, [Validators.required]),\n              netValue: new UntypedFormControl(resp.recordset[i].AMOUNT, [Validators.required]),\n              remarks: new UntypedFormControl(resp.recordset[i].DESC1, [Validators.required])\n            });\n            this.prodItem.push(prodGrid);\n            this.productService.getProductDocuments(resp.recordset[i].ITCODE, 'IMG').subscribe(respo => {\n              const prodDet = {\n                index: i,\n                boqNo: resp.recordset[i].JOB_NO,\n                prodCode: resp.recordset[i].ITCODE,\n                prodDesc: resp.recordset[i].DESCRIPTION,\n                prodImg: respo.recordset[0].DOCUMENTNAME,\n                prodQty: resp.recordset[i].TOTQTY,\n                prodUnit: resp.recordset[i].UNITTYPE,\n                unitPrice: resp.recordset[i].PRICE,\n                netValue: resp.recordset[i].AMOUNT\n              };\n              this.prodDetailsArr.push(prodDet);\n            });\n          }\n        });\n      });\n      this.financeService.getPartyDetailFromPCODE(res.recordset[0].PCODE).subscribe(res => {\n        this.custDetails = res.recordset[0];\n        console.log(this.custDetails);\n      });\n    });\n  }\n  submitForm() {\n    const data = this.quotForm.value;\n    console.log(data.quotNo);\n    this.quotationService.getQuotationMaster(data.quotNo).subscribe(res => {\n      if (res.recordset.length === 0) {\n        this.quotationService.postQuotationMaster(data.quotNo, this.formatDate(data.quotDate), data.quotStatus, this.formatDate(data.quotExpDate), data.pcode, data.contactId, data.custName, data.custAdd1, data.custAdd2, data.custAdd3, data.custPhone1, String(this.mQtnTotal), String(this.mQtnDisc), String(this.mQtnVAT), String(this.mQtnGTotal), data.subject, data.description, data.remarks, String(this.mCYear), this.uC);\n        for (let i = 0; i < data.itemArr.length; i++) {\n          this.quotationService.postQuotationDetails(data.quotNo, data.itemArr[i].prodDesc, data.itemArr[i].remarks, data.itemArr[i].prodQty, data.itemArr[i].prodCode, data.itemArr[i].unitPrice, data.itemArr[i].netValue, data.itemArr[i].discPercentage, data.itemArr[i].discount, data.itemArr[i].vatCategory, data.itemArr[i].vatPer, data.itemArr[i].vatAmount, data.itemArr[i].prodUnit, data.itemArr[i].boqNo, this.uC, String(this.mCYear));\n        }\n        this.quotationService.updateQuotDocNo(this.docQtnNo, String(this.mCYear));\n      } else {\n        this.quotationService.updateQuotationMaster(data.quotNo, data.quotStatus, this.formatDate(data.quotExpDate), data.pcode, data.contactId, data.custName, data.custAdd1, data.custAdd2, data.custAdd3, data.custPhone1, String(this.mQtnTotal), String(this.mQtnDisc), String(this.mQtnVAT), String(this.mQtnGTotal), data.subject, data.description, data.remarks);\n        this.quotationService.deleteQuotationDetails(data.quotNo).subscribe(res => {\n          for (let i = 0; i < data.itemArr.length; i++) {\n            this.quotationService.postQuotationDetails(data.quotNo, data.itemArr[i].prodDesc, data.itemArr[i].remarks, data.itemArr[i].prodQty, data.itemArr[i].prodCode, data.itemArr[i].unitPrice, data.itemArr[i].netValue, data.itemArr[i].discPercentage, data.itemArr[i].discount, data.itemArr[i].vatCategory, data.itemArr[i].vatPer, data.itemArr[i].vatAmount, data.itemArr[i].prodUnit, data.itemArr[i].boqNo, this.uC, String(this.mCYear));\n          }\n        }, err => {\n          console.log(err);\n        });\n      }\n    }, err => {\n      console.log(data.quotNo);\n      this.quotationService.postQuotationMaster(data.quotNo, this.formatDate(data.quotDate), data.quotStatus, this.formatDate(data.quotExpDate), data.pcode, data.contactId, data.custName, data.custAdd1, data.custAdd2, data.custAdd3, data.custPhone1, String(this.mQtnTotal), String(this.mQtnDisc), String(this.mQtnVAT), String(this.mQtnGTotal), data.subject, data.description, data.remarks, String(this.mCYear), this.uC);\n      for (let i = 0; i < data.itemArr.length; i++) {\n        this.quotationService.postQuotationDetails(data.quotNo, data.itemArr[i].prodDesc, data.itemArr[i].remarks, data.itemArr[i].prodQty, data.itemArr[i].prodCode, data.itemArr[i].unitPrice, data.itemArr[i].netValue, data.itemArr[i].discPercentage, data.itemArr[i].discount, data.itemArr[i].vatCategory, data.itemArr[i].vatPer, data.itemArr[i].vatAmount, data.itemArr[i].prodUnit, data.itemArr[i].boqNo, this.uC, String(this.mCYear));\n      }\n      this.quotationService.updateQuotDocNo(this.docQtnNo, String(this.mCYear));\n    });\n    console.log(data);\n    this._snackBar.open(\"Data Successfully Updated!\", \"OK\");\n  }\n  refreshForm() {}\n  savePDF() {\n    console.log(this.prodDetailsArr);\n    const data = this.quotForm.value;\n    var doc = new jsPDF(\"portrait\", \"px\", \"a4\");\n    doc.setFontSize(16);\n    doc.setFont('Helvetica', 'bold');\n    doc.text('QUOTATION', 10, 87);\n    doc.setFontSize(12);\n    doc.text(`Ref: ${data.quotNo}`, 330, 86);\n    doc.line(5, 92, 440, 92);\n    doc.text(`Date: ${data.quotDate}`, 10, 103);\n    doc.line(5, 75, 5, 109);\n    doc.line(305, 75, 305, 109);\n    doc.line(440, 75, 440, 109);\n    doc.text(`VAT No: 100339666800003`, 310, 103);\n    doc.line(5, 109, 440, 109);\n    doc.text(`M/s. ${data.custName},`, 10, 120);\n    doc.setFont('Helvetica', 'normal');\n    doc.text(`${data.custAdd1}`, 10, 130);\n    doc.text(`${data.custAdd2}, ${data.custAdd3}`, 10, 140);\n    doc.text(`${data.custPhone1}, ${data.custPhone2}`, 10, 150);\n    doc.text(`${data.custEmail}`, 10, 160);\n    doc.text(`Dear ${this.custDetails.NAME},`, 10, 175);\n    doc.text(`Thank you for your valuable enquiry, please find below our discounted price for the following products.`, 10, 185);\n    //doc.line(5, 190, 440, 190);\n    doc.setFont('Helvetica', 'bold');\n    doc.text(`PROJECT:                              ${data.subject}`, 10, 205);\n    //doc.line(5, 205, 440, 205);\n    autoTable(doc, {\n      html: '#prodTable',\n      startY: 210,\n      bodyStyles: {\n        minCellHeight: 75\n      },\n      theme: 'plain',\n      tableLineColor: [105, 105, 105],\n      tableLineWidth: 0.15,\n      rowPageBreak: 'avoid',\n      showFoot: 'lastPage',\n      margin: {\n        left: 5,\n        right: 7,\n        bottom: 26,\n        top: 75\n      },\n      willDrawCell: function (data) {\n        doc.setDrawColor(105, 105, 105); // set the border color\n        doc.setLineWidth(0.15); // set the border with\n        // draw bottom border\n        doc.line(data.cell.x, data.cell.y + data.cell.height, data.cell.x + data.cell.width, data.cell.y + data.cell.height);\n        // draw top border\n        doc.line(data.cell.x + data.cell.width, data.cell.y, data.cell.x, data.cell.y);\n        // draw left border\n        // doc.line(data.cell.x,data.cell.y + data.cell.height,data.cell.x,data.cell.y);\n        // draw right border\n        // doc.line(data.cell.x + data.cell.width,data.cell.y,data.cell.x + data.cell.width,data.cell.y + data.cell.height);\n      },\n\n      didDrawCell: function (data) {\n        if (data.column.index === 4 && data.cell.section === 'body') {\n          var td = data.cell.raw;\n          console.log(td);\n          var image = new Image();\n          image = td.getElementsByTagName('img')[0];\n          console.log(image.src);\n          //img.src = 'image-url';\n          var dim = data.cell.height - data.cell.padding('vertical');\n          var textPos = data.cell.getTextPos();\n          doc.addImage(image.src, 'png', textPos.x, textPos.y, dim, dim);\n          image.onload = () => {\n            // await for the image to be fully loaded\n          };\n        }\n      },\n      columnStyles: {\n        // 0: {halign: 'right', cellWidth: 5,},\n        //  1: {halign: 'left', cellWidth: 15,},\n        //  2: {halign: 'right', cellWidth: 15,},\n        //  3: {halign: 'right', cellWidth: 100,},\n        4: {\n          cellWidth: 75\n        }\n        //  5: {halign: 'right', cellWidth: 50,},\n        //  6: {halign: 'right', cellWidth: 50,},\n        //  7: {halign: 'right', cellWidth: 50,}\n      }\n    });\n\n    doc.addPage();\n    doc.setFont('Helvetica', 'bold');\n    doc.text('Note:', 10, 85);\n    doc.setLineWidth(0.5);\n    doc.line(5, 90, 440, 90);\n    doc.setFont('Helvetica', 'normal');\n    doc.text(`1.     Please note that the quantities we have considered in our Quotation are based on the BOQ that \\n        was received from your site office.`, 15, 105);\n    doc.text(`2.     Prices are valid for above mentioned quantity. Prices may vary with any changes in the quantity.`, 15, 130);\n    doc.text(`3.     All the products quoted are based on sea shipment. If you require shipment through air, actual \\n        air freight charges will be applicable.`, 15, 145);\n    doc.line(5, 165, 440, 165);\n    doc.setFont('Helvetica', 'bold');\n    doc.text('Terms & Conditions:', 10, 175);\n    doc.line(5, 180, 440, 180);\n    doc.setFont('Helvetica', 'normal');\n    doc.text(`Validity`, 10, 195);\n    doc.text(`Availabity`, 10, 210);\n    doc.text(`Payment`, 10, 225);\n    doc.text(`Delivery`, 10, 240);\n    doc.text(`: ${data.quotExpDate}`, 100, 195);\n    doc.text(`: To be determined at the time of confirmation of the order.`, 100, 210);\n    doc.text(`: ${data.remarks}`, 100, 225);\n    doc.text(`: ${data.description}`, 100, 240);\n    doc.line(5, 250, 440, 250);\n    doc.text(`We hope that the above price is competitive to you. We look forward to receive a valuable order from you.`, 10, 275);\n    doc.text(`Best Regards,`, 10, 290);\n    doc.text(`For,`, 10, 355);\n    doc.setFont('Helvetica', 'bold');\n    doc.text(`AK PACIFIC International Gen. Trading LLC`, 10, 370);\n    doc.text(`Mansoor Ahmed`, 10, 380);\n    doc.setFont('Helvetica', 'normal');\n    doc.text(`International Business Development Manager`, 10, 390);\n    doc.text(`Mob.No: 00971 56 164 1335/055 412 1234`, 10, 400);\n    doc = this.addWaterMark(doc);\n    //doc.save(`${data.quotNo}.pdf`);  \n    var string = doc.output('datauri');\n    var iframe = \"<iframe width='100%' height='100%' src='\" + string + \"'></iframe>\";\n    var x = window.open();\n    x.document.open();\n    x.document.write(iframe);\n    x.document.close();\n  }\n  addWaterMark(doc) {\n    var totalPages = doc.internal.getNumberOfPages();\n    for (let i = 1; i <= totalPages; i++) {\n      doc.setPage(i);\n      doc.setLineWidth(0.15);\n      //doc.roundedRect(5, 5, 435, 600, 0, 0);\n      var img = new Image();\n      img.src = 'assets/pics/favicon.png';\n      doc.addImage(img, 'png', 6, 6, 69, 69);\n      doc.setFontSize(16);\n      doc.setFont('Helvetica', 'bold');\n      doc.setTextColor(255, 0, 0);\n      doc.text('AK', 80, 20);\n      doc.setTextColor(0, 0, 0);\n      doc.text('PACIFIC INTERNATIONAL GEN. TRADING LLC', 100, 20);\n      doc.setFontSize(13);\n      doc.setFont('Helvetica', 'normal');\n      doc.text('Post Box: 51389, DUBAI, United Arab Emirates', 120, 32);\n      doc.text('Tel: +971 4 386 3815 / Fax: +971 4 397 7814', 120, 44);\n      doc.setTextColor(0, 0, 255);\n      doc.setDrawColor(0, 0, 255);\n      doc.setLineWidth(0.5);\n      doc.text('www.ak-pacific.com', 180, 56);\n      doc.line(180, 58, 267, 58);\n      doc.setTextColor(0, 0, 0);\n      doc.setDrawColor(0, 0, 0);\n      doc.setFont('Helvetica', 'bold');\n      doc.text('A subsidiary of       Group', 165, 70);\n      doc.setTextColor(255, 0, 0);\n      doc.text('AK', 238, 70);\n      doc.line(5, 75, 440, 75);\n      doc.setFont('Helvetica', 'normal');\n      doc.setTextColor(0, 0, 0);\n      doc.text(`Page ${i} of ${totalPages}`, 390, 615);\n    }\n    return doc;\n  }\n  lookupPriceDialog(index) {\n    const data = this.quotForm.value;\n    console.log(data);\n    console.log(this.prodItem.at(index).value);\n    let dialogRef = this.dialog.open(this.priceLookUpDialog);\n    var value;\n    if (this.prodItem.at(index).value.value === '') {\n      value = Number(this.prodItem.at(index).value.prodQty) * Number(this.prodItem.at(index).value.unitPrice);\n    } else {\n      value = this.prodItem.at(index).value.value;\n    }\n    this.valueForm = new UntypedFormGroup({\n      index: new UntypedFormControl(index, [Validators.required]),\n      boqNo: new UntypedFormControl(this.prodItem.at(index).value.boqNo, [Validators.required]),\n      prodCode: new UntypedFormControl(this.prodItem.at(index).value.prodCode, [Validators.required]),\n      prodDesc: new UntypedFormControl(this.prodItem.at(index).value.prodDesc, [Validators.required]),\n      quantity: new UntypedFormControl(this.prodItem.at(index).value.prodQty, [Validators.required]),\n      unitPrice: new UntypedFormControl(this.prodItem.at(index).value.unitPrice, [Validators.required]),\n      value: new UntypedFormControl(value, [Validators.required]),\n      discPercentage: new UntypedFormControl(this.prodItem.at(index).value.discPercentage, [Validators.required]),\n      discount: new UntypedFormControl(this.prodItem.at(index).value.discount, [Validators.required]),\n      amount: new UntypedFormControl(this.prodItem.at(index).value.amount, [Validators.required]),\n      vatCategory: new UntypedFormControl(this.prodItem.at(index).value.vatCategory, [Validators.required]),\n      vatPer: new UntypedFormControl(this.prodItem.at(index).value.vatPer, [Validators.required]),\n      vatAmount: new UntypedFormControl(this.prodItem.at(index).value.vatAmount, [Validators.required]),\n      netValue: new UntypedFormControl(this.prodItem.at(index).value.netValue, [Validators.required]),\n      remarks: new UntypedFormControl(this.prodItem.at(index).value.remarks, [Validators.required])\n    });\n    this.calcPrice();\n    this.calcDiscount();\n    this.calcTax(this.taxArr[0]);\n  }\n  lookupCustomerDetails(code) {\n    this.selectedRowIndex = 0;\n    let dialogRef = this.dialog.open(this.custLookupDialog);\n    this.financeService.searchCustomer(code).subscribe(res => {\n      console.log(res);\n      this.custArr = res.recordset;\n      this.custDataSource = new MatTableDataSource(this.custArr);\n    }, err => {\n      console.log(err);\n    });\n  }\n  lookupProductDetails(code, index) {\n    this.selectedRowIndex = 0;\n    this.productIndex = index;\n    let dialogRef = this.dialog.open(this.prodLookupDialog);\n    this.productService.searchProduct(code).subscribe(res => {\n      console.log(res);\n      this.prodArr = res.recordset;\n      this.prodDataSource = new MatTableDataSource(this.prodArr);\n    }, err => {\n      console.log(err);\n    });\n  }\n  getProductDetails(index) {\n    this.prodDetails = {};\n    this.slides = [];\n    this.productService.getProduct(this.prodItem.at(index).value.prodCode, String(this.mCYear)).subscribe(res => {\n      console.log(res.recordset[0]);\n      this.prodDetails = res.recordset[0];\n      this.productService.getProductDocuments(this.prodItem.at(index).value.prodCode, 'IMG').subscribe(respo => {\n        if (respo.recordset.length === 0) {\n          var img = {\n            src: \"https://ifaqtworks-akpacific.s3.me-south-1.amazonaws.com/images/imgNaN.png\"\n          };\n          this.slides.push(img);\n        } else {\n          for (let i = 0; i < respo.recordset.length; i++) {\n            const docUrl = \"https://ifaqtworks-akpacific.s3.me-south-1.amazonaws.com/images/\" + respo.recordset[i].DOCUMENTNAME;\n            var img = {\n              src: docUrl\n            };\n            this.slides.push(img);\n          }\n          console.log(this.slides);\n        }\n      }, err => {\n        var img = {\n          src: \"https://ifaqtworks-akpacific.s3.me-south-1.amazonaws.com/images/imgNaN.png\"\n        };\n        this.slides.push(img);\n      });\n    });\n    let dialogRef = this.dialog.open(this.prodDetailsDialog);\n  }\n  calcDiscount() {\n    const data = this.valueForm.value;\n    var discount = Number(data.value) * Number(data.discPercentage) / 100;\n    var gross = Number(data.value) - discount;\n    this.valueForm.patchValue({\n      discount: discount,\n      amount: gross\n    });\n  }\n  calibrateTotal() {\n    this.mQtnTotal = 0;\n    this.mQtnDisc = 0;\n    this.mQtnVAT = 0;\n    this.mQtnGTotal = 0;\n    const data = this.quotForm.value;\n    for (let i = 0; i < data.itemArr.length; i++) {\n      this.mQtnTotal += data.itemArr[i].value;\n      this.mQtnDisc += data.itemArr[i].discount;\n      this.mQtnVAT += data.itemArr[i].vatAmount;\n      this.mQtnGTotal += data.itemArr[i].netValue;\n    }\n  }\n  calcPrice() {\n    const data = this.valueForm.value;\n    var value = Number(data.quantity) * Number(data.unitPrice);\n    this.valueForm.patchValue({\n      value: value\n    });\n    this.calcDiscount();\n    this.calcTax(this.taxArr[0]);\n  }\n  calcTax(event) {\n    const data = this.valueForm.value;\n    var taxVal = Number(data.amount) * Number(event.TAX_1_PERC) / 100;\n    var netValue = Number(data.amount) + taxVal;\n    console.log(taxVal);\n    this.valueForm.patchValue({\n      vatCategory: event.TAX_CATEGORY_ID,\n      vatPer: event.TAX_1_PERC,\n      vatAmount: taxVal,\n      netValue: netValue\n    });\n  }\n  selectCustomer(event) {\n    this.quotForm.patchValue({\n      pcode: event.PCODE,\n      custName: event.CUST_NAME,\n      custPhone1: event.PHONE1,\n      custPhone2: event.PHONE2,\n      custEmail: event.EMAIL,\n      custAdd1: event.ADD1,\n      custAdd2: event.ADD2,\n      custAdd3: event.ADD3,\n      contactId: event.CONTACT\n    });\n    let dialogRef = this.dialog.closeAll();\n  }\n  selectProduct(event) {\n    const rowData = {\n      prodCode: event.PCODE,\n      prodDesc: event.DESCRIPTION,\n      unitPrice: event.RETAILPRICE\n    };\n    this.prodItem.at(this.productIndex).patchValue(rowData);\n    let dialogRef = this.dialog.closeAll();\n  }\n  highlight(type, index) {\n    console.log(index);\n    if (type === \"cust\") {\n      if (index >= 0 && index <= this.custArr.length - 1) this.selectedRowIndex = index;\n    } else if (type === \"prod\") {\n      if (index >= 0 && index <= this.prodArr.length - 1) this.selectedRowIndex = index;\n    }\n  }\n  arrowUpEvent(type, index) {\n    this.highlight(type, --index);\n  }\n  arrowDownEvent(type, index) {\n    this.highlight(type, ++index);\n  }\n  submitPrice() {\n    const data = this.valueForm.value;\n    const rowData = {\n      boqNo: data.boqNo,\n      prodQty: data.quantity,\n      unitPrice: data.unitPrice,\n      value: data.value,\n      discPercentage: data.discPercentage,\n      discount: data.discount,\n      amount: data.amount,\n      vatCategory: data.vatCategory,\n      vatPer: data.vatPer,\n      vatAmount: data.vatAmount,\n      netValue: data.netValue,\n      remarks: data.remarks\n    };\n    this.prodItem.at(data.index).patchValue(rowData);\n    this.calibrateTotal();\n    let dialogRef = this.dialog.closeAll();\n  }\n  deleteProductItem(index) {\n    if (this.prodItem.length === 1) {} else {\n      this.prodItem.removeAt(index);\n    }\n    this.calibrateTotal();\n  }\n  addProductItem() {\n    const prodGrid = new UntypedFormGroup({\n      boqNo: new UntypedFormControl('', [Validators.required]),\n      prodCode: new UntypedFormControl('', [Validators.required]),\n      prodDesc: new UntypedFormControl('', [Validators.required]),\n      prodUnit: new UntypedFormControl('', [Validators.required]),\n      prodQty: new UntypedFormControl('', [Validators.required]),\n      unitPrice: new UntypedFormControl('', [Validators.required]),\n      value: new UntypedFormControl('', [Validators.required]),\n      discPercentage: new UntypedFormControl('0', [Validators.required]),\n      discount: new UntypedFormControl('', [Validators.required]),\n      vatCategory: new UntypedFormControl('', [Validators.required]),\n      vatPer: new UntypedFormControl('', [Validators.required]),\n      vatAmount: new UntypedFormControl('', [Validators.required]),\n      netValue: new UntypedFormControl('', [Validators.required]),\n      remarks: new UntypedFormControl('', [Validators.required])\n    });\n    this.prodItem.push(prodGrid);\n  }\n  get prodItem() {\n    return this.quotForm.get('itemArr');\n  }\n  formatDate(date) {\n    var d = new Date(date),\n      day = '' + d.getDate(),\n      month = '' + (d.getMonth() + 1),\n      year = d.getFullYear();\n    if (day.length < 2) {\n      day = '0' + day;\n    }\n    if (month.length < 2) {\n      month = '0' + month;\n    }\n    return [day, month, year].join('-');\n  }\n};\n__decorate([ViewChild('priceLookUpDialog', {\n  static: false\n})], QuotationsDetailsComponent.prototype, \"priceLookUpDialog\", void 0);\n__decorate([ViewChild('custLookupDialog', {\n  static: false\n})], QuotationsDetailsComponent.prototype, \"custLookupDialog\", void 0);\n__decorate([ViewChild('prodLookupDialog', {\n  static: false\n})], QuotationsDetailsComponent.prototype, \"prodLookupDialog\", void 0);\n__decorate([ViewChild('prodDetailsDialog', {\n  static: false\n})], QuotationsDetailsComponent.prototype, \"prodDetailsDialog\", void 0);\n__decorate([ViewChild('prodTable', {\n  static: false\n})], QuotationsDetailsComponent.prototype, \"prodTable\", void 0);\nQuotationsDetailsComponent = __decorate([Component({\n  selector: 'app-quotations-details',\n  templateUrl: './quotations-details.component.html',\n  styleUrls: ['./quotations-details.component.scss']\n}), __param(6, Inject(LOCALE_ID))], QuotationsDetailsComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}