{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { makeStateKey } from '@angular/platform-browser';\nimport { RESPONSE } from '@nguniversal/express-engine/tokens';\nimport { CdkPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { availableLayouts, defaultLayout } from 'src/app/app-layouts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nimport * as i2 from \"../layouts.service\";\nimport * as i3 from \"@angular/cdk/portal\";\nfunction DynamicLayoutComponent_ng_template_0_Template(rf, ctx) {}\nconst MOBILE_DEVICE = makeStateKey('mobile-device');\nexport let DynamicLayoutComponent = /*#__PURE__*/(() => {\n  class DynamicLayoutComponent {\n    constructor(platformId, response, state, layoutsService) {\n      this.platformId = platformId;\n      this.response = response;\n      this.state = state;\n      this.layoutsService = layoutsService;\n      // Check if the user is requesting the app from a mobile device\n      let mobileDevice = 'not-mobile';\n      // In our server.ts we added a custom response header with information about the device requesting the app\n      if (isPlatformServer(this.platformId)) {\n        if (this.response && this.response !== null) {\n          // Get custom header from the response sent from the server.ts\n          const mobileDeviceHeader = this.response.get('mobile-device');\n          // If the mobile-device header is not null, then the user is requesting the app from a mobile device. Override reference.\n          if (mobileDeviceHeader && mobileDeviceHeader !== 'null') {\n            mobileDevice = mobileDeviceHeader;\n          }\n        }\n        // Set the mobileDevice reference using Angular TransferState mechanisms so we can have this reference ready\n        // when the app transitions from server side rendering to client side rendering\n        // this.state.set(MOBILE_DEVICE, mobileDevice);\n        console.log('we\\'re rendering from the server, checking response object.');\n        console.log(`MOBILE_DEVICE from RESPONSE: ${mobileDevice}`);\n      } else {\n        mobileDevice = this.state.get(MOBILE_DEVICE, mobileDevice);\n        console.log('we\\'re rendering from the browser, there is no response object.');\n        console.log(`MOBILE_DEVICE from TransferState: ${mobileDevice}`);\n      }\n      if (mobileDevice !== 'not-mobile') {\n        this.renderLayoutPortal('mobile');\n      } else {\n        this.renderLayoutPortal(defaultLayout.name);\n      }\n    }\n    ngOnInit() {}\n    ngOnDestroy() {\n      this.dynamicLayoutSwitchSubscription.unsubscribe();\n    }\n    ngAfterViewInit() {\n      this.dynamicLayoutSwitchSubscription = this.layoutsService.switchLayoutSubject.subscribe(selectedLayoutName => {\n        this.renderLayoutPortal(selectedLayoutName);\n      }, error => {\n        console.log('switchLayoutSubject [DynamicLayoutComponent] - error', error);\n      }, () => {\n        console.log('switchLayoutSubject [DynamicLayoutComponent] - complete');\n      });\n    }\n    renderLayoutPortal(layoutName) {\n      // Check if the layout we want to render exists. We check against the list defined in the src/app-layouts.ts file\n      const layoutToRender = availableLayouts.find(layout => {\n        return layout.name === layoutName;\n      });\n      if (layoutToRender) {\n        this.dynamicLayoutPortal = new ComponentPortal(layoutToRender.component);\n      }\n    }\n    static #_ = this.ɵfac = function DynamicLayoutComponent_Factory(t) {\n      return new (t || DynamicLayoutComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(RESPONSE, 8), i0.ɵɵdirectiveInject(i1.TransferState), i0.ɵɵdirectiveInject(i2.LayoutsService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: DynamicLayoutComponent,\n      selectors: [[\"app-dynamic-layout\"]],\n      viewQuery: function DynamicLayoutComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(CdkPortalOutlet, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dynamicLayoutPortalOutlet = _t.first);\n        }\n      },\n      decls: 1,\n      vars: 1,\n      consts: [[3, \"cdkPortalOutlet\"]],\n      template: function DynamicLayoutComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, DynamicLayoutComponent_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"cdkPortalOutlet\", ctx.dynamicLayoutPortal);\n        }\n      },\n      dependencies: [i3.CdkPortalOutlet],\n      encapsulation: 2\n    });\n  }\n  return DynamicLayoutComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}