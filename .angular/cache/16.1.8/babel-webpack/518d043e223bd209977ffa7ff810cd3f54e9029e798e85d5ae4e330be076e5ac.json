{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { LoggedUserModel } from './logged-user.model';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http) {\n      this.http = http;\n      this.url = 'http://15.185.46.105:5045/api/user';\n      //this.setUser(); // for the purpose of this example we initialize it with a default logged user\n      this.loggedUserSubject = new BehaviorSubject(this.loggedUser);\n    }\n    isAuthenticated() {\n      return this.loggedUserSubject.asObservable();\n    }\n    // tslint:disable-next-line:max-line-length\n    setUser(userid, firstname, lastname, userclass) {\n      // this sets a default user for the template\n      this.loggedUser = new LoggedUserModel();\n      this.loggedUser.firstname = firstname;\n      this.loggedUser.lastname = lastname;\n      //this.loggedUser.image = image;\n      this.loggedUser.userclass = userclass;\n      localStorage.setItem('userid', JSON.stringify(userid));\n      localStorage.setItem('firstname', JSON.stringify(firstname));\n      localStorage.setItem('lastname', JSON.stringify(lastname));\n      localStorage.setItem('userclass', JSON.stringify(userclass));\n    }\n    checkUser(username) {\n      // your log in logic should go here\n      return this.http.get(this.url + '/' + username);\n    }\n    getUserRole(userclass) {\n      return this.http.get(this.url + '/roles/' + userclass);\n    }\n    signin(usercode, firstname, lastname, userclass) {\n      this.setUser(usercode, firstname, lastname, userclass);\n      // your log in logic should go here\n      this.loggedUserSubject.next(this.loggedUser);\n      return of(true);\n    }\n    signup(fName, lName, usrCode, pwd, cntctNbr, userid) {\n      const headers = new HttpHeaders().set('Content-Type', 'application/json');\n      const newUsr = {\n        usercode: usrCode,\n        password: pwd,\n        firstname: fName,\n        lastname: lName,\n        contactno: cntctNbr,\n        userid: userid\n      };\n      return this.http.post(this.url + 's/new', JSON.stringify(newUsr), {\n        headers: headers\n      });\n    }\n    logout() {\n      this.loggedUser = null;\n      localStorage.setItem('firstname', \"\");\n      localStorage.setItem('lastname', \"\");\n      localStorage.setItem('userclass', \"\");\n      // your log out logic should go here\n      this.loggedUserSubject.next(null);\n      return of(true);\n    }\n    recoverPassword(usrCode, pwd) {\n      const headers = new HttpHeaders().set('Content-Type', 'application/json');\n      const newUsr = {\n        usercode: usrCode,\n        password: pwd\n      };\n      return this.http.post(this.url + '/changePassword', JSON.stringify(newUsr), {\n        headers: headers\n      });\n    }\n    static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n      return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthenticationService,\n      factory: AuthenticationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}