{"ast":null,"code":"import { Breakpoints } from '@angular/cdk/layout';\nimport { ReplaySubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nexport let ResponsiveBreakpointsService = /*#__PURE__*/(() => {\n  class ResponsiveBreakpointsService {\n    constructor(breakpointObserver) {\n      this.breakpointObserver = breakpointObserver;\n      this.screenSizeChangeSubject = new ReplaySubject(1);\n      const isSmallScreen = this.breakpointObserver.isMatched([Breakpoints.XSmall, Breakpoints.Small]);\n      const isMediumScreen = this.breakpointObserver.isMatched([Breakpoints.Medium]);\n      this.currentScreenSize = isSmallScreen ? 'small' : isMediumScreen ? 'medium' : 'large';\n      // Use Angular CDK Breakpoint Observer to detect changes on the screen size\n      this.breakpointObserver.observe([Breakpoints.XSmall, Breakpoints.Small, Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge]).subscribe(result => {\n        if (result.matches) {\n          if (result.breakpoints[Breakpoints.XSmall] || result.breakpoints[Breakpoints.Small]) {\n            this.screenSizeChangeSubject.next('small');\n          }\n          if (result.breakpoints[Breakpoints.Medium]) {\n            this.screenSizeChangeSubject.next('medium');\n          }\n          if (result.breakpoints[Breakpoints.Large] || result.breakpoints[Breakpoints.XLarge]) {\n            this.screenSizeChangeSubject.next('large');\n          }\n        }\n      });\n    }\n    static #_ = this.ɵfac = function ResponsiveBreakpointsService_Factory(t) {\n      return new (t || ResponsiveBreakpointsService)(i0.ɵɵinject(i1.BreakpointObserver));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ResponsiveBreakpointsService,\n      factory: ResponsiveBreakpointsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ResponsiveBreakpointsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}