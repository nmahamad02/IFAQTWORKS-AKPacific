{"ast":null,"code":"import { PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { AppShellConfig } from '../config/app-shell.config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction ImageShellComponent_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngIf\", \"_mode === 'cover'\"]);\n  }\n}\nconst _c0 = [\"*\"];\nexport let ImageShellComponent = /*#__PURE__*/(() => {\n  class ImageShellComponent {\n    set mode(val) {\n      this._mode = val !== undefined && val !== null ? val : '';\n    }\n    get mode() {\n      return this._mode;\n    }\n    set src(val) {\n      if (!this.debugMode) {\n        this._src = val !== undefined && val !== null ? val : '';\n      }\n      if (this._mode === 'cover') {\n        // Unset the background-image\n        this.backgroundImage = 'unset';\n      }\n      // Show loading indicator\n      // When using SSR (Server Side Rendering), avoid the loading animation while the image resource is being loaded\n      if (isPlatformServer(this.platformId)) {\n        this.imageLoaded = true;\n      } else {\n        this.imageLoaded = false;\n      }\n    }\n    set alt(val) {\n      this._alt = val !== undefined && val !== null ? val : '';\n    }\n    constructor(platformId) {\n      this.platformId = platformId;\n      // To debug shell styles, change configuration in the assets/app-shell.config.json file\n      this.debugMode = AppShellConfig.settings && AppShellConfig.settings.debug ? AppShellConfig.settings.debug : false;\n      // tslint:disable-next-line:variable-name\n      this._src = '';\n      // tslint:disable-next-line:variable-name\n      this._alt = '';\n      // tslint:disable-next-line:variable-name\n      this._mode = '';\n      this.imageLoaded = false;\n    }\n    _imageLoaded() {\n      this.imageLoaded = true;\n      // If it's a cover image then set the background-image property accordingly\n      if (this._mode === 'cover') {\n        this.backgroundImage = 'url(' + this._src + ')';\n      }\n    }\n    static #_ = this.ɵfac = function ImageShellComponent_Factory(t) {\n      return new (t || ImageShellComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ImageShellComponent,\n      selectors: [[\"cc-image-shell\"]],\n      hostVars: 5,\n      hostBindings: function ImageShellComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"mode\", ctx.mode);\n          i0.ɵɵstyleProp(\"background-image\", ctx.backgroundImage);\n          i0.ɵɵclassProp(\"img-loaded\", ctx.imageLoaded);\n        }\n      },\n      inputs: {\n        mode: \"mode\",\n        src: \"src\",\n        alt: \"alt\"\n      },\n      ngContentSelectors: _c0,\n      decls: 3,\n      vars: 3,\n      consts: [[1, \"spinner\", \"fas\", \"fa-circle-notch\", \"fa-spin\", \"fa-3x\", \"fa-fw\"], [1, \"inner-img\", 3, \"src\", \"alt\", \"load\"], [4, \"ngIf\"]],\n      template: function ImageShellComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelement(0, \"i\", 0);\n          i0.ɵɵelementStart(1, \"img\", 1);\n          i0.ɵɵlistener(\"load\", function ImageShellComponent_Template_img_load_1_listener() {\n            return ctx._imageLoaded();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(2, ImageShellComponent_ng_content_2_Template, 1, 0, \"ng-content\", 2);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"src\", ctx._src, i0.ɵɵsanitizeUrl)(\"alt\", ctx._alt);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx._mode === \"cover\");\n        }\n      },\n      dependencies: [i1.NgIf],\n      styles: [\"[_nghost-%COMP%]{--image-shell-loading-background: #EEE;--image-shell-border-radius: 0px;display:block;position:relative;height:100%;border-radius:var(--image-shell-border-radius);transition:all ease-in-out .3s;z-index:2}[_nghost-%COMP%] > .spinner[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%] > .inner-img[_ngcontent-%COMP%]{vertical-align:initial}[_nghost-%COMP%]:before{content:\\\"\\\";background:var(--image-shell-loading-background);border-radius:var(--image-shell-border-radius);position:absolute;inset:0}[_nghost-%COMP%]:not([mode=cover]){width:100%;overflow:hidden}[_nghost-%COMP%]:not([mode=cover]) > .inner-img[_ngcontent-%COMP%]{transition:visibility 0s linear,opacity .5s linear;opacity:0;visibility:hidden;width:100%;height:100%;border-radius:var(--image-shell-border-radius)}[_nghost-%COMP%]:not([mode=cover]).img-loaded:before{display:none}[_nghost-%COMP%]:not([mode=cover]).img-loaded > .inner-img[_ngcontent-%COMP%]{opacity:1;visibility:visible}[mode=cover][_nghost-%COMP%]{background-size:cover;background-repeat:no-repeat}[mode=cover][_nghost-%COMP%]:before, [mode=cover][_nghost-%COMP%] > .spinner[_ngcontent-%COMP%]{z-index:-1}[mode=cover][_nghost-%COMP%] > .inner-img[_ngcontent-%COMP%]{display:none;visibility:hidden}[mode=cover].img-loaded[_nghost-%COMP%]:before{display:none}[animation=gradient][_nghost-%COMP%]{--image-shell-loading-background: #EEE;--image-shell-animation-color: #DDD}[animation=gradient][_nghost-%COMP%]:before{background:linear-gradient(to right,var(--image-shell-loading-background) 8%,var(--image-shell-animation-color) 18%,var(--image-shell-loading-background) 33%);background-size:800px 104px;animation:_ngcontent-%COMP%_animateBackground 2s ease-in-out infinite}[animation=gradient].img-loaded[_nghost-%COMP%]:before{background:none;animation:0}@keyframes _ngcontent-%COMP%_animateBackground{0%{background-position:-468px 0}to{background-position:468px 0}}[animation=spinner][_nghost-%COMP%]{--image-shell-spinner-size: 28px;--image-shell-spinner-color: #CCC}[animation=spinner][_nghost-%COMP%] > .spinner[_ngcontent-%COMP%]{display:block;position:absolute;top:calc(50% - var(--image-shell-spinner-size) / 2);left:calc(50% - var(--image-shell-spinner-size) / 2);width:var(--image-shell-spinner-size);height:var(--image-shell-spinner-size);font-size:var(--image-shell-spinner-size);line-height:var(--image-shell-spinner-size);color:var(--image-shell-spinner-color)}[animation=spinner].img-loaded[_nghost-%COMP%] > .spinner[_ngcontent-%COMP%]{display:none;visibility:hidden}.add-overlay[_nghost-%COMP%]{--image-shell-overlay-background: rgba(0, 0, 0, .4)}.add-overlay.img-loaded[_nghost-%COMP%]:before{display:block;background:var(--image-shell-overlay-background)}\"]\n    });\n  }\n  return ImageShellComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}